/*
Що таке асинхронність та багатопоточність, що спільного та відмінного:

Асинхронність:
1. Асинхронність дозволяє програмі виконувати інші завдання, поки очікує на завершення операцій (наприклад, запити до сервера, таймери).
2. В JS асинхронність реалізується через колбеки, Promise, async/await.
3. JS є однопотоковою мовою програмування, але використовує асинхронні операції для паралельного виконання завдань.

Багатопоточність:
1. Багатопоточність дозволяє програмі виконувати кілька потоків одночасно.
2. Використовується в мовах програмування, що підтримують паралельне виконання (наприклад, Java, C++).
3. Кожен потік виконує незалежні завдання, що можуть виконуватись одночасно.

Спільне:
- Обидва підходи дозволяють покращити продуктивність програми, роблячи її більш реактивною та ефективною при виконанні завдань, які займають тривалий час.

Відмінне:
- Асинхронність в JS не використовує багатопоточність, а покладається на події та обробку зворотних викликів (callbacks).
*/

/*
Як реалізувати асинхронність в JS:

1. Використання колбеків:
   function fetchData(callback) {
     setTimeout(() => {
       callback('data');
     }, 1000);
   }

2. Використання Promise:
   const fetchData = new Promise((resolve, reject) => {
     setTimeout(() => {
       resolve('data');
     }, 1000);
   });

3. Використання async/await:
   async function fetchData() {
     const data = await new Promise((resolve) => {
       setTimeout(() => {
         resolve('data');
       }, 1000);
     });
     return data;
   }
*/

/*
Що таке Promise, як її можна запустити та завершити:

Promise - це об'єкт, який представляє майбутнє завершення (або невдачу) асинхронної операції та його результат.

Запуск Promise:
   const promise = new Promise((resolve, reject) => {
     // асинхронна операція
     if (успіх) {
       resolve('успіх');
     } else {
       reject('помилка');
     }
   });

Завершення Promise:
- Успіх: виклик resolve(value).
- Невдача: виклик reject(reason).
*/

/*
В яких станах може бути Promise:

1. Pending (очікування): початковий стан, не завершений і не відхилений.
2. Fulfilled (завершений): операція успішно завершена.
3. Rejected (відхилений): операція завершена з помилкою.
*/

/*
Як обробити успішне завершення Promise:

   promise.then((value) => {
     console.log('Успіх:', value);
   });
*/

/*
Як обробити не успішне завершення Promise:

   promise.catch((error) => {
     console.log('Помилка:', error);
   });
*/

/*
Що таке async та await, яке їх призначення:

async та await - це синтаксичний цукор для роботи з Promise, що робить асинхронний код виглядати та поводитись як синхронний.

async:
- Використовується для оголошення асинхронної функції.
- Завжди повертає Promise.

await:
- Використовується всередині асинхронних функцій для паузи виконання функції до завершення Promise.
- Повертає результат Promise або викидає помилку, якщо Promise відхилений.
*/

/*
Які основні відмінності обробки Promise з використанням async/await:

1. Читабельність:
   - async/await робить код більш читабельним та лаконічним, схожим на синхронний код.

2. Обробка помилок:
   - В async/await можна використовувати try/catch для обробки помилок:
     async function fetchData() {
       try {
         const data = await fetch('url');
         return data;
       } catch (error) {
         console.log('Помилка:', error);
       }
     }

3. Ланцюжки:
   - Ланцюжки then/catch можуть бути замінені на послідовні виклики await, що спрощує структуру коду.
*/
