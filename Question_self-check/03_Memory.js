/*
Які є види помилок та які з них найскладніше виявити:

1. Синтаксичні помилки (Syntax Errors): помилки в структурі коду, виявляються при спробі виконання коду.
2. Логічні помилки (Logical Errors): помилки в логіці програми, коли програма працює без помилок, але дає неправильний результат.
3. Помилки виконання (Runtime Errors): помилки, які виникають під час виконання програми (наприклад, виклик методу об'єкта, який дорівнює null).

Найскладніше виявити логічні помилки, оскільки код не видає помилок, але працює не так, як очікується.
*/

/*
Що таке debugging та як його використовувати в JS:

Debugging (налагодження) - це процес виявлення та виправлення помилок у коді. В JS його можна виконувати за допомогою:

- Консолі браузера (Console) для виведення повідомлень про помилки та логів.
- Інструментів розробника (DevTools) у браузерах, таких як Chrome та Firefox.
- Дебаггерів, які дозволяють ставити точки зупинки (breakpoints) і покроково виконувати код.
*/

/*
Що таке exceptions та для чого вони потрібні:

Exceptions (виключення) - це механізм для обробки помилок, який дозволяє програмі реагувати на помилки під час виконання, не перериваючи виконання всієї програми. Виключення використовуються для керування потоком програми в умовах помилок.
*/

/*
В якій послідовності викликаються блоки try catch finally:

1. Блок try: виконується спочатку.
2. Блок catch: виконується, якщо виникає виключення в блоці try.
3. Блок finally: виконується завжди після блоків try та catch, незалежно від того, виникла помилка чи ні.
*/

/*
Які є види exceptions:

1. EvalError: виникає при використанні функції eval().
2. RangeError: виникає, коли число виходить за межі допустимого діапазону.
3. ReferenceError: виникає при спробі звернення до змінної, яка не визначена.
4. SyntaxError: виникає при синтаксичних помилках.
5. TypeError: виникає при невідповідності типів.
6. URIError: виникає при неправильному використанні глобальних функцій URI (наприклад, decodeURIComponent()).
*/

/*
Як згенерувати exception в коді:

За допомогою оператора throw:
throw new Error("Помилка");
*/

/*
Чи може бути, що блок finally не спрацює:

Блок finally майже завжди виконується. Він може не виконатися лише в разі завершення роботи процесу або якщо викликається process.exit() в Node.js.
*/

/*
Що спільне та відмінне між операторами throw та return:

Спільне:
- Обидва оператори використовуються для керування потоком виконання програми.

Відмінне:
- throw генерує виключення і перериває виконання поточного блоку коду, переходячи до найближчого блоку catch.
- return завершує виконання функції та повертає значення виклику функції.
*/
