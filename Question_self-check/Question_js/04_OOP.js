/*
Що таке об'єкти в JS та що вони можуть містити в собі:

Об'єкти в JavaScript - це колекції властивостей, які мають ім'я (ключ) і значення. Вони можуть містити:
- Примітивні значення (числа, рядки, логічні значення і т.д.)
- Інші об'єкти
- Функції (методи)
*/

/*
Що таке ООП, які є принципи ООП та коротко опишіть кожний:

ООП (Об'єктно-орієнтоване програмування) - це парадигма програмування, яка базується на концепції "об'єктів". Основні принципи ООП:
1. Інкапсуляція: об'єднання даних та методів, які працюють з цими даними, в єдину сутність (об'єкт).
2. Наслідування: можливість створювати нові класи на основі існуючих, успадковуючи їх властивості та методи.
3. Поліморфізм: здатність використовувати один і той самий інтерфейс для різних типів об'єктів.
4. Абстракція: процес виділення загальних характеристик і поведінки об'єктів, приховуючи при цьому складні деталі реалізації.
*/

/*
Яким чином можна отримати всі властивості обʼєкта в JS:

- За допомогою Object.keys(obj): повертає масив ключів власних властивостей об'єкта.
- За допомогою Object.getOwnPropertyNames(obj): повертає масив всіх власних властивостей (включаючи не перелічувані).
- За допомогою for-in циклу: ітерує по всіх перелічуваних властивостях об'єкта та його прототипу.
*/

/*
Що таке методи та яка відмінність між функціями:

Методи - це функції, які є властивостями об'єкта. Відмінність:
- Методи викликаються в контексті об'єкта і мають доступ до його властивостей через this.
- Функції можуть бути незалежними і викликатися поза контекстом об'єкта.
*/

/*
Що таке this та на що він може вказувати:

this - це ключове слово, яке вказує на поточний контекст виконання. Він може вказувати на:
- Глобальний об'єкт (в браузері - window, в Node.js - global).
- Об'єкт, в контексті якого викликається метод.
- Новий екземпляр об'єкта при використанні new.
- Заданий контекст при використанні call, apply або bind.
*/

/*
Як можна створити копію обʼєкта в JS:

- За допомогою Object.assign({}, obj): поверхнева копія об'єкта.
- За допомогою оператора розпакування: {...obj}.
- Для глибокої копії можна використовувати JSON.parse(JSON.stringify(obj)) або бібліотеки, як-от lodash.
*/

/*
Що таке клас та яка відмінність між обʼєктом:

Клас - це шаблон для створення об'єктів з певними властивостями та методами. Об'єкт - це екземпляр класу.
*/

/*
Що таке конструктор та яке його призначення:

Конструктор - це спеціальний метод класу, який викликається при створенні нового об'єкта. Він використовується для ініціалізації властивостей об'єкта.
*/

/*
Що таке get/set та яке їх призначення:

get і set - це спеціальні методи для доступу та зміни властивостей об'єкта. Вони дозволяють виконувати додаткову логіку при читанні або запису властивостей.
*/

/*
Що таке валідація даних, де її краще виконувати:

Валідація даних - це процес перевірки правильності та коректності даних. Її краще виконувати на рівні клієнта (для швидкого зворотного зв'язку) та на рівні сервера (для забезпечення безпеки та цілісності даних).
*/

/*
Що таке статичні властивості класу, яка їх особливість:

Статичні властивості належать самому класу, а не екземплярам класу. Вони можуть бути доступні без створення екземпляра класу.
*/

/*
Як реалізовується приховування властивостей в класі, для чого це потрібно:

Приховування властивостей реалізується за допомогою символів, замикань або використання # перед іменем властивості (приватні поля). Це потрібно для забезпечення інкапсуляції та контролю доступу до внутрішнього стану об'єкта.
*/

/*
Що таке super, для чого він використовується:

super - це ключове слово, яке використовується для виклику конструктора або методів батьківського класу в дочірньому класі.
*/

/*
Як реалізувати наслідування в JS, яке його призначення:

Наслідування реалізується за допомогою ключового слова extends:
class Child extends Parent {
  constructor() {
    super();
  }
}

Призначення: дозволяє створювати нові класи на основі існуючих, успадковуючи їх властивості та методи.
*/

/*
Як реалізувати поліморфізм в JS, яке його призначення:

Поліморфізм реалізується за допомогою наслідування та перевизначення методів:
class Animal {
  makeSound() {
    console.log('Some sound');
  }
}
class Dog extends Animal {
  makeSound() {
    console.log('Bark');
  }
}
class Cat extends Animal {
  makeSound() {
    console.log('Meow');
  }
}

Призначення: дозволяє використовувати один інтерфейс для різних типів об'єктів.
*/

/*
Чи застосовується операція hoisting до класів в JS:

Ні, hoisting не застосовується до класів в JS. Класи повинні бути оголошені перед їх використанням.
*/
