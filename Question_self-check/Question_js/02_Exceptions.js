/*
Масиви

1. Яка різниця між методами splice() та slice()?
- splice(): змінює вміст масиву, видаляючи або додаючи елементи. Повертає видалені елементи.
- slice(): повертає новий масив, що містить копію частини вихідного масиву. Не змінює оригінальний масив.

2. Яким чином можна створити копію всього масиву?
- За допомогою методу slice(): const newArray = originalArray.slice();
- За допомогою оператора розпакування: const newArray = [...originalArray];
- За допомогою методу Array.from(): const newArray = Array.from(originalArray);

3. Яка різниця між методами filter() та find()?
- filter(): повертає новий масив з усіма елементами, які задовольняють умову.
- find(): повертає перший елемент, який задовольняє умову, або undefined, якщо такий елемент не знайдено.

4. Як працює метод reduce()?
- reduce(): застосовує функцію до кожного елемента масиву, накопичуючи результат в один вихідний. Синтаксис: array.reduce(callback, initialValue).

5. Яким чином можна визначити кількість негативних елементів в масиві?
- За допомогою методу filter():
  const negativeCount = array.filter(x => x < 0).length;
*/

/*
Цикли

1. В чому відмінність між циклами while та do-while?
- while: перевіряє умову перед кожною ітерацією, виконується, поки умова є істинною.
- do-while: виконує тіло циклу хоча б один раз, потім перевіряє умову перед кожною наступною ітерацією.

2. Який оператор використовується для пропущення ітерації в циклі?
- Оператор continue.

3. Для чого потрібний оператор break?
- Оператор break використовується для виходу з циклу до його завершення.

4. В чому різниця між for-in та for-of?
- for-in: ітерує по індексах (властивостях) масиву або об'єкта.
- for-of: ітерує по значеннях ітерабельного об'єкта (масив, рядок, тощо).

5. Який порядок виконання циклу for?
- ініціалізація, перевірка умови, виконання тіла циклу, оновлення (ітерація).
*/

/*
Функції

1. Що таке функції в JS?
- Функції - це блоки коду, які можна викликати за іменем для виконання певного завдання.

2. Які типи функцій існують в JS?
- Оголошені функції (function declarations).
- Функціональні вирази (function expressions).
- Стрілкові функції (arrow functions).

3. Що таке hoisting? Чи всі функції його мають?
- Hoisting - це механізм, при якому оголошення функцій і змінних піднімаються на початок їхньої області видимості. Оголошені функції мають hoisting, а функціональні вирази та стрілкові функції - ні.

4. Що таке аргументи функції? Які типи аргументів існують?
- Аргументи функції - це значення, які передаються функції під час її виклику. Існують позиційні аргументи, аргументи за замовчуванням та аргументи з залишковим параметром (rest parameter).

5. Що таке arguments в функціях?
- arguments - це об'єкт, подібний до масиву, який містить усі аргументи, передані функції.

6. Яким чином виконати function overriding?
- Function overriding здійснюється шляхом оголошення нової версії функції з таким самим іменем і параметрами в дочірньому класі (для методів класів) або в глобальному контексті.

7. Що таке callback функція?
- Callback функція - це функція, яка передається іншій функції як аргумент і викликається всередині цієї іншої функції для виконання певної дії.

8. Що таке scope? З яким scope працюють функції в JS?
- Scope (область видимості) визначає, де змінні і функції можуть бути доступні. Функції в JS працюють з глобальним та локальним scope.

9. Що таке closure?
- Closure (замикання) - це функція, яка має доступ до змінних з області видимості, в якій вона була створена, навіть після того, як ця область видимості завершила своє виконання.

10. Для чого потрібний оператор return? Що відбудеться якщо його не використовувати?
- Оператор return використовується для повернення значення з функції. Якщо його не використовувати, функція поверне undefined.
*/
